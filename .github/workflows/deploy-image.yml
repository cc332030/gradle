
name: deploy-image

on:
  workflow_call:
    inputs:
      distribution:
        required: false
        type: string
        default: temurin
      java-version:
        required: false
        type: string
        default: 21
      artifact-path:
        required: false
        type: string
        default: |
          build
      env-file:
        required: false
        type: string
        default: .env
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      HOST:
        required: true
      PORT:
        required: true
      DOCKER_TOKEN:
        required: true

jobs:
  deploy-image:
    runs-on: ubuntu-latest
    steps:
      -
        name: checkout
        uses: actions/checkout@v4
      -
        name: set-java-version
        if: ${{ inputs.java-version != '' }}
        run: |
          echo "JAVA_VERSION=${{ inputs.java-version }}" >> $GITHUB_ENV
      -
        name: import-env
        if: ${{ hashFiles(inputs.env-file) != '' }}
        run: cat ${{inputs.env-file}} >> $GITHUB_ENV
      -
        name: cache
        uses: actions/cache@v4
        if: ${{ inputs.build-before-image == 'true' }}
        with:
          key: ${{ runner.os }}-gradle-${{ hashFiles('.env','**/gradle.properties','**/build.gradle*','**/settings.gradle*','**/gradle-wrapper.properties') }}
          path: |
            ~/.gradle/wrapper
            ~/.gradle/jdks
            ~/.gradle/caches
      - name: setup-java
        uses: actions/setup-java@v4
        if: ${{ env.JAVA_VERSION != '' }}
        with:
          distribution: ${{ inputs.distribution }}
          java-version: ${{ env.JAVA_VERSION }}
      - id: image-name
        name: image-name
        run: |
          echo "image-name=${{ github.actor }}/${{ github.event.repository.name }}:latest" >> $GITHUB_OUTPUT
      - name: build-image
        run: sh gradlew -U bootBuildImage --imageName=${{ steps.image-name.outputs.image-name }}
      -
        name: login
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: push-image
        run: docker push ${{ steps.image-name.outputs.image-name }}
      - name: init-ssh-pre
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh-pre.sh | sudo sh
      - name: init-ssh
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh.sh | sh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      -
        name: start
        run: ssh -o LogLevel=ERROR -p ${{ secrets.PORT }} root@${{ secrets.HOST }} \
          "cd /home/program/${{ github.event.repository.name }} && dcomposeinit -d"
      - name: init-ssh-clean
        if: ${{ always() }}
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh-clean.sh | sh
      - id: artifact-name
        name: artifact-name
        run: |
          echo "artifact-name=${{ github.event.repository.name }}.${{ github.ref_name }}.${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.artifact-name }}
          path: ${{ inputs.artifact-path }}
          retention-days: 7
