
name:  deploy-image-dockerfile

on:
  workflow_call:
    inputs:
      distribution:
        required: false
        type: string
        default: temurin
      java-version:
        required: false
        type: string
      build-before-image:
        required: false
        type: string
        default: true
      dockerfile:
        required: false
        type: string
        default: dockerfile
      artifact-path:
        required: false
        type: string
        default: |
          build
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      HOST:
        required: true
      PORT:
        required: true
      DOCKER_TOKEN:
        required: true

jobs:
  deploy-image-dockerfile:
    runs-on: ubuntu-latest
    steps:
      -
        name: checkout
        uses: actions/checkout@v3
      -
        name: cache
        uses: actions/cache@v3
        if: ${{ inputs.build-before-image }}
        with:
          key: gradle
          path: |
            ~/.gradle/wrapper
            ~/.gradle/jdks
            ~/.gradle/caches
      -
        name: setup-java
        uses: actions/setup-java@v3
        if: ${{ inputs.java-version != '' && inputs.build-before-image }}
        with:
          distribution: ${{ inputs.distribution }}
          java-version: ${{ inputs.java-version }}
      -
        name: build
        if: ${{ inputs.build-before-image }}
        run: sh gradlew --refresh-dependencies build
      -
        id: image-name
        name: image-name
        run: |
          echo "image-name=${{ github.actor }}/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
      -
        name: qemu
        uses: docker/setup-qemu-action@v2
      -
        name: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: login
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        name: build-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            ${{ steps.image-name.outputs.image-name }}:${{ github.ref_name }}
            ${{ steps.image-name.outputs.image-name }}:latest
          cache-from: type=registry,ref=${{ steps.image-name.outputs.image-name }}:buildcache
          cache-to: type=registry,ref=${{ steps.image-name.outputs.image-name }}:buildcache,mode=max
      -
        name: init-ssh-pre
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh-pre.sh | sudo sh
      -
        name: init-ssh
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh.sh | sh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      -
        name: start
        run: ssh -o LogLevel=ERROR -p ${{ secrets.PORT }} root@${{ secrets.HOST }} \
          "cd /home/program/${{ github.event.repository.name }} && dcomposeinit -d"
      -
        id: artifact-name
        name: artifact-name
        run: |
          echo "artifact-name=${{ github.event.repository.name }}.${{ github.ref_name }}.${{ github.run_id }}" >> $GITHUB_OUTPUT
      -
        name: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-name.outputs.artifact-name }}
          path: ${{ inputs.artifact-path }}
          retention-days: 3
      -
        name: init-ssh-clean
        if: ${{ always() }}
        run: curl -sL https://github.com/cc332030/linux/raw/master/script/init-ssh/init-ssh-clean.sh | sh
